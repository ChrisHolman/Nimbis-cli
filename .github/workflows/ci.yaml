name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.out
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            ext: ''
          - goos: linux
            goarch: arm64
            ext: ''
          - goos: darwin
            goarch: amd64
            ext: ''
          - goos: darwin
            goarch: arm64
            ext: ''
          - goos: windows
            goarch: amd64
            ext: '.exe'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME="nimbis-${GOOS}-${GOARCH}${{ matrix.ext }}"
          go build -ldflags="-w -s" -o "${BINARY_NAME}" .
          ls -lh nimbis-*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nimbis-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          path: nimbis-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          if-no-files-found: error

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request' && github.repository_owner != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: yourusername/nimbis
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          mkdir -p release
          cd artifacts
          for dir in */; do
            cd "$dir"
            if ls *.exe 1> /dev/null 2>&1; then
              zip -q ../../release/"${dir%/}".zip *
            else
              tar -czf ../../release/"${dir%/}".tar.gz *
            fi
            cd ..
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nimbis-linux-amd64

      - name: Install scanning tools
        run: |
          # Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sudo sh -s -- -b /usr/local/bin
          
          # Install Checkov
          pip3 install checkov

      - name: Make binary executable
        run: chmod +x nimbis-linux-amd64

      - name: Run integration test
        run: |
          ./nimbis-linux-amd64 --version
          ./nimbis-linux-amd64 -t . --secrets -f json -o test-results.json
          
      - name: Check results
        run: |
          if [ -f test-results.json ]; then
            echo "✓ Integration test passed"
          else
            echo "✗ Integration test failed"
            exit 1
          fi
